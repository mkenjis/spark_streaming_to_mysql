import org.apache.kafka.common.serialization.StringDeserializer
import org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent
import org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe

import org.apache.spark.streaming.StreamingContext; 
import org.apache.spark.streaming.Seconds; 
import org.apache.spark.streaming.kafka010.KafkaUtils; 

val kafkaParams = Map[String, Object](
  "bootstrap.servers" -> "ubkafka:9092",
  "key.deserializer" -> classOf[StringDeserializer],
  "value.deserializer" -> classOf[StringDeserializer],
  "group.id" -> "use_a_separate_group_id_for_each_stream",
  "auto.offset.reset" -> "latest",
  "enable.auto.commit" -> (false: java.lang.Boolean)
)

val ssc = new StreamingContext(sc, Seconds(5))

val topics = Array("test")

val stream = KafkaUtils.createDirectStream[String, String](
  ssc,
  PreferConsistent,
  Subscribe[String, String](topics, kafkaParams)
)

val result = stream.map(record => (record.key, record.value))

import java.sql.{Connection,DriverManager,PreparedStatement}

result.foreachRDD ( rdd => {  
   rdd.foreachPartition( partionOfRecords => {
      val url = "jdbc:mysql://localhost:3306/mydata?useSSL=false"
      val user = "mydata"
      val password = "admsys123"
      Class.forName("com.mysql.jdbc.Driver")
      val conn = DriverManager.getConnection(url,user,password)
      val stmt = conn.createStatement()
      partionOfRecords.foreach(record=>{
         stmt.addBatch("insert into df_aux values('"+record._1+"','"+record._2+"')")
      })
      stmt.executeBatch()
      // conn.commit()
   })
})

sc.setCheckpointDir("/home/hadoop/checkpoint")

ssc.start()
